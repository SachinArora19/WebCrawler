version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: webcrawler-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword123
      MYSQL_DATABASE: webcrawler
      MYSQL_USER: webcrawler
      MYSQL_PASSWORD: webcrawler123
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
    networks:
      - webcrawler-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-prootpassword123"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 60s
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: webcrawler-api
    restart: unless-stopped
    environment:
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USER: webcrawler
      DB_PASSWORD: webcrawler123
      DB_NAME: webcrawler
      PORT: 8080
      GIN_MODE: release
      JWT_SECRET: your-super-secure-jwt-secret-key-change-in-production
      ALLOWED_ORIGINS: http://localhost:5173,http://localhost:3000,http://localhost,http://frontend
      MAX_CONCURRENT_CRAWLS: 5
      CRAWL_TIMEOUT: 30
    ports:
      - "8080:8080"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - webcrawler-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        VITE_API_BASE_URL: http://localhost:8080/api
    container_name: webcrawler-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - webcrawler-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Redis for caching (future enhancement)
  redis:
    image: redis:7-alpine
    container_name: webcrawler-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - webcrawler-network
    command: redis-server --appendonly yes
    profiles:
      - redis

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: webcrawler-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - webcrawler-network
    profiles:
      - monitoring

networks:
  webcrawler-network:
    driver: bridge

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
